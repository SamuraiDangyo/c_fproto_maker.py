#!/usr/bin/python
# -*- coding: utf-8 -*-

#
# c_fproto_maker.py, a dumb script that generates function prototypes
# Copyright (C) 2019-2020 Toni Helminen
# GPLv3
#

#
# c_fproto_maker.py is a really dumb script that
# generates C language? function prototypes from a given file
#

#
# Functions needs to be in this form so it understands :
# static void Loop()
# {
# ...

#
# Still needs human hand for final formatting
#

import re, time

#
# Modify these to fit your program
#

NAME       = 'Sapeli.c'
START_STR  = '/*\nSapeli, a Chess960 engine\nCopyright (C) 2019-2020 Toni Helminen\n*/\n\n'
START_STR += '/*\nSapeli.c function declarations\nGenerated by makefdec.py\n*/\n\n'
START_STR += '#ifndef FDEC_H\n#define FDEC_H\n'
END_STR    = '\n#endif /* #ifndef FDEC_H */'

def read_functions(name):
  myfile = open(name, "r")
  data   = myfile.read()
  myfile.close()

  pattern = re.compile(r'^[\w]+.*?\)$', re.MULTILINE)
  mylist  = re.findall(pattern, data)

  # Not main()
  mylist = mylist[:-1]

  # Remove dublicates
  return list(dict.fromkeys(mylist))

def mody_prototypes_1(protolist):
  mylist  = []
  pattern = re.compile(r'\s?\w+\,')

  for item in protolist:
    mylist.append(pattern.sub(",", item))

  return mylist

def mody_prototypes_2(protolist):
  mylist  = []
  pattern = re.compile(r'\s?\w+\)')

  for item in protolist:
    if re.search("\(void\)", item):
      mylist.append(item)
    else:
      mylist.append(pattern.sub(")", item))

  return mylist

def write_prototypes(protolist):
  myfile = open("fdec.h", "w")
  protos = ";\n".join(item for item in protolist)
  myfile.write(START_STR + protos + ";" + END_STR)
  myfile.close()

def go():
  write_prototypes(mody_prototypes_2(mody_prototypes_1(read_functions(NAME))))

def main():
  print "~+~+~ c_fproto_maker.py ~+~+~\n..." # w/o Herculean effort ...
  start = time.time()
  go()
  print ("= Done! ( %.3fs )" % (time.time() - start))

if __name__ == "__main__":
  main()
